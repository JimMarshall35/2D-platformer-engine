#define BANDS 17
#define NUMBLOBS 6

vec3 bands[BANDS];/* = vec3[BANDS](
    vec3(1.0,0.0,0.0),
    vec3(0.0,1.0,0.0),
    vec3(0.0,0.0,1.0),
    vec3(0.5,0.2,0.3),
    vec3(0.1,0.8,0.1),
    vec3(0.31,0.23,0.21),
    vec3(0.04,0.1,0.9)
);*/
void populateBands(){
    vec3 colour1 = vec3(sin(iTime*0.9),sin(iTime*0.3),sin(iTime*0.02));
    vec3 colour2 = vec3(sin(iTime*0.01),sin(iTime*0.26),sin(iTime*0.1));
    for(int i=0; i<BANDS; i++){
        
        bands[i] = mix(colour1, colour2, float(i)/float(BANDS));
        
    }
}
float doblob(vec2 uv, float x, float y, float r){
    float distance_from_point = length(vec2(x,y) - uv);
    
    float fraction = distance_from_point;
    return clamp(0.0, r,fraction);
}
struct Blob{
    vec2 pos;
    vec2 movement;
    float radius;
    float period;
};
Blob blobs[NUMBLOBS] = Blob[NUMBLOBS](
    Blob(vec2(0.5f,0.5f),vec2(0.21,0.4),0.5,1.0),
    Blob(vec2(0.5f,0.5f),vec2(0.21,13),0.5,2.9),
    Blob(vec2(0.5f,0.5f),vec2(0.32,12),0.5,1.9),
    Blob(vec2(0.5f,0.5f),vec2(0.51,12),0.2,2.35),
    Blob(vec2(0.5f,0.5f),vec2(0.456,0.98),0.3,3.0),
    Blob(vec2(0.5f,0.5f),vec2(0.78,0.4),0.1,1.6)
);



const float SPEED = 1000.0;
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    populateBands();
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    
    
    float fraction = 0.0;
    //fraction += doblob(uv,0.5f,0.5f, 0.2f);
    
    for(int i=0; i<NUMBLOBS; i++){
        Blob b = blobs[i];
        vec2 pos = b.pos + normalize(b.movement)*sin((iTime/3.142)*b.period)*0.2;
        fraction += doblob(uv,pos.x,pos.y, b.radius);
    }
    
    //fraction /= float(NUMBLOBS);
    vec3 col = bands[int(clamp(0.0,1.0,abs(fraction))*float(BANDS))];
    

    // Output to screen
    fragColor = vec4(col,1.0);
}